{"version":3,"sources":["Pomodoro.js","App.js","serviceWorker.js","index.js"],"names":["TableofSettings","id","this","props","sectionID","title","ID","minusID","value","onClick","method1","icon","faArrowUp","breakID","breakLength","plusID","method2","faArrowDown","React","Component","Pomodoro","increaseTime","state","running","breakTime","setState","Play","intervalID","setInterval","decreaseSeconds","clearInterval","sessionTime","isSession","timerMinute","timerSecond","bind","decreaseTime","increaseSessionTime","decreaseSessionTime","Reset","updateTime","onToggleInterval","console","log","audioBeep","play","pause","currentTime","minName","plusName","faPlay","faStop","faRedo","preload","src","ref","audio","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d37ef05d.chunk.js","sourcesContent":["import React from 'react'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faArrowDown } from '@fortawesome/free-solid-svg-icons'\r\nimport { faArrowUp } from '@fortawesome/free-solid-svg-icons'\r\nimport { faPlay } from '@fortawesome/free-solid-svg-icons'\r\nimport { faStop } from '@fortawesome/free-solid-svg-icons'\r\nimport { faRedo } from '@fortawesome/free-solid-svg-icons'\r\nclass TableofSettings extends React.Component {\r\n\r\n\r\n    render() {\r\n        return (\r\n            <section id={this.props.sectionID}>\r\n                <h3>{this.props.title}</h3>\r\n                <div id={this.props.ID}>\r\n                    <button id={this.props.minusID} value='-' onClick={this.props.method1} ><FontAwesomeIcon icon ={faArrowUp}/>\r\n                    </button>\r\n                    <div id={this.props.breakID}>{this.props.breakLength}</div>\r\n                    <button id={this.props.plusID} onClick={this.props.method2} ><FontAwesomeIcon icon ={faArrowDown}/>\r\n                    </button>\r\n\r\n                </div>\r\n            </section>\r\n        )\r\n    }\r\n}\r\n\r\nclass Pomodoro extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            breakTime: 5,\r\n            sessionTime: 25,\r\n            isSession: true,\r\n            timerMinute: 25,\r\n            timerSecond: 0,\r\n            intervalID: '',\r\n            running: false,\r\n        }\r\n        this.increaseTime = this.increaseTime.bind(this);\r\n        this.decreaseTime = this.decreaseTime.bind(this);\r\n        this.increaseSessionTime = this.increaseSessionTime.bind(this);\r\n        this.decreaseSessionTime = this.decreaseSessionTime.bind(this);\r\n        this.Reset = this.Reset.bind(this);\r\n        this.Play = this.Play.bind(this);\r\n        this.decreaseSeconds = this.decreaseSeconds.bind(this);\r\n        this.updateTime = this.updateTime.bind(this);\r\n        this.onToggleInterval = this.onToggleInterval.bind(this);\r\n    }\r\n\r\n\r\n    // INCREASING OR DECREASING TIME\r\n    increaseTime = () => {\r\n        if (!this.state.running){\r\n\r\n        \r\n        if (this.state.breakTime === 60) {\r\n            return;\r\n        }\r\n        else {\r\n            this.setState({\r\n                breakTime: this.state.breakTime + 1\r\n            })\r\n        }\r\n    }\r\n    }\r\n    decreaseTime() {\r\n        if (!this.state.running){\r\n        if (this.state.breakTime === 1) {\r\n            return;\r\n        }\r\n        else {\r\n            this.setState({\r\n                breakTime: this.state.breakTime - 1\r\n            })\r\n        }\r\n    }\r\n    }\r\n    increaseSessionTime() {\r\n        if (!this.state.running){\r\n        if (this.state.sessionTime === 60) {\r\n            return;\r\n        }\r\n        else {\r\n            this.setState({\r\n                sessionTime: this.state.sessionTime + 1,\r\n                timerMinute: this.state.timerMinute + 1\r\n            })\r\n        }\r\n    }\r\n    }\r\n    decreaseSessionTime() {\r\n        if (!this.state.running){\r\n        if (this.state.sessionTime === 1) {\r\n            return;\r\n        }\r\n        else {\r\n            this.setState({\r\n                sessionTime: this.state.sessionTime - 1,\r\n                timerMinute: this.state.timerMinute - 1\r\n            })\r\n        }\r\n    }\r\n    }\r\n\r\n    // Simple function to reduce minutes\r\n    updateTime() {\r\n        this.setState({\r\n            timerMinute: this.state.timerMinute - 1\r\n        })\r\n    }\r\n\r\n    //This switch timer displayed in render method as SESSION or BREAK \r\n    onToggleInterval(isSession) {\r\n        if (isSession) {\r\n            console.log(this.state.timerMinute + 'sessions time is: ' + this.state.sessionTime)\r\n            this.setState({\r\n                timerMinute: this.state.sessionTime\r\n            })\r\n        } else {\r\n            console.log(this.state.timerMinute + 'breaktime is: ' + this.state.breakTime)\r\n            this.setState({\r\n                timerMinute: this.state.breakTime\r\n            })\r\n        }\r\n    }\r\n\r\n    //Main function of reducing seconds. It checks if seconds equals 0.If yes => \r\n    //another check for minutes are 0 and if yes => and is it session or break? Switch timers and status. \r\n    // if seconds are not 0 - update seconds. If seconds are 0 but minutes are not zero - reducing minutes.\r\n    decreaseSeconds() {\r\n        if (this.state.timerMinute ===0 && this.state.timerSecond ===0){\r\n            if (this.state.isSession){\r\n                this.audioBeep.play()\r\n                this.setState({\r\n                    isSession: false\r\n                })\r\n                this.onToggleInterval(this.state.isSession)\r\n            }\r\n            else {\r\n                this.audioBeep.play()\r\n                this.setState({\r\n                    isSession: true\r\n                });\r\n                this.onToggleInterval(this.state.isSession)\r\n            }\r\n\r\n        }\r\n\r\n        else if (this.state.timerSecond === 0) {\r\n            \r\n            this.setState({ timerSecond: 59 })\r\n            this.updateTime()\r\n        }\r\n        else {\r\n            this.setState({\r\n                timerSecond: this.state.timerSecond - 1\r\n            })\r\n        }\r\n\r\n\r\n    }\r\n\r\n    // START button. It checks if timer is running. Yes => another click will stop it. No - timer will run. \r\n    Play = () => {\r\n        if (this.state.running === false){let intervalID = setInterval(this.decreaseSeconds, 1000);\r\n        this.setState({\r\n            intervalID: intervalID,\r\n            running: true,\r\n        })\r\n    }\r\n        else{\r\n            clearInterval(this.state.intervalID)\r\n            this.setState({\r\n                running: false\r\n            })\r\n        }\r\n    }\r\n\r\n   \r\n\r\n    // Reset all stats to initial state.\r\n    Reset() {\r\n        clearInterval(this.state.intervalID)\r\n        this.setState({\r\n            breakTime: 5,\r\n            timerMinute: 25,\r\n            timerSecond: 0,\r\n            sessionTime: 25,\r\n            isSession: true,\r\n            running: false\r\n        })\r\n        this.audioBeep.pause();\r\n        this.audioBeep.currentTime = 0;\r\n    }\r\n\r\n\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div id='pomodoro'>\r\n                <h1>POMODORO CLOCK</h1>\r\n                <div id='tables'>\r\n                    <TableofSettings ID='break-label'\r\n                        sectionID='break-name'\r\n                        title='Break Length'\r\n                        minusID='break-decrement'\r\n                        method1={this.decreaseTime}\r\n                        minName='-'\r\n                        breakID='break-length'\r\n                        breakLength={this.state.breakTime}\r\n                        plusID='break-increment'\r\n                        method2={this.increaseTime}\r\n                        plusName='+' />\r\n                    <TableofSettings ID='session-label'\r\n                        sectionID='session-name'\r\n                        title='Session Length'\r\n                        minusID='session-decrement'\r\n                        method1={this.decreaseSessionTime}\r\n                        minName='-'\r\n                        breakID='session-length'\r\n                        breakLength={this.state.sessionTime\r\n                        }\r\n                        plusID='session-increment'\r\n                        method2={this.increaseSessionTime}\r\n                        plusName='+' />\r\n                </div>\r\n                <div id='timer-label'>\r\n                    {this.state.isSession === true ? 'Session' : 'Break'}\r\n                    <div id='time-left'>\r\n                        <span id='timer'>{this.state.timerMinute < 10 ? '0' + this.state.timerMinute \r\n                        :  this.state.timerMinute}</span>\r\n                        <span>:</span>\r\n                        <span id='timer'>{this.state.timerSecond === 0 ? '00'\r\n                            : this.state.timerSecond < 10 ? '0' + this.state.timerSecond\r\n                                : this.state.timerSecond}\r\n                        </span>\r\n                    </div>\r\n    <button id='start_stop' onClick={this.Play}>{this.state.running === false? <FontAwesomeIcon icon={faPlay}/> :<FontAwesomeIcon icon={faStop}/>}</button>\r\n                    <button id='reset' onClick={this.Reset} ><FontAwesomeIcon icon={faRedo}/></button>\r\n                </div>\r\n                <audio id=\"beep\" preload=\"auto\" \r\n          src=\"https://goo.gl/65cBl1\"\r\n          ref={(audio) => { this.audioBeep = audio; }} />\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default Pomodoro","import React from 'react';\nimport './App.css';\nimport Pomodoro from './Pomodoro';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      \n      \n     <Pomodoro/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}